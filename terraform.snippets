# HashiCorp Terraform Resources
# Snippet by: David Wooldridge <zombie@zombix.org>
# Based on: http://terraform.io/docs/ - version 0.7.x

## GLOBALS

# Variable with default
snippet variable
	variable "${1:name}" {
	  default = ${2}
	}

	${3}

# Empty variable
snippet variable_empty
	variable "${1:name}" {}

	${2}

# Generic resource
snippet resource
	resource "${1:type}" "${2:name}" {
	  ${3}

	  tags {
	    Name = "${4}"
	  }
	}

snippet output
	output "${1}" {
	  value = "${2}"
	}

	${3}

## Remote state - https://www.terraform.io/docs/state/remote/index.html
snippet remote_state_atlas
	resource "terraform_remote_state" "${1}" {
	  backend = "atlas"
	  config {
	    name         = "${2}"
	    access_token = "${3}"
	  }
	}
	${4}

snippet remote_state_s3
	resource "terraform_remote_state" "foo" {
	  backend = "s3"
	  config {
	    bucket = "${1}"
	    key    = "network/terraform.tfstate"
	    region = "${2}"
	  }
	}
	${3}

snippet provider_atlas
	provider "atlas" {
	  token = "${var.atlas_token}"
	}
	${1}

snippet atlas_artifact
	resource "atlas_artifact" "${1}" {
	  name          = "${2}"
	  type          = "${3}"
	  build         = "${4}"
	  version       = "${5}"
	  metadata_keys = "${6}"
	  metadata {
	    arch = "${7}"
	  }
	}
	${8}

## AWS Provider

## Data Sources
snippet aws_ami
	data "aws_ami" "${1}" {
	  most_recent      = ${2:true} # boolean
	  executable_users = ["${3:self}"]

	  filter {
	    name   = "${4}"
	    values = ["${5}"]
	  }

	  owners = ["${6}"]
	}

	${7}

snippet aws_availability_zones
	data "aws_availability_zones" "${1:available}" {}

	${2}

snippet aws_caller_identity
	data "aws_caller_identity" "${1:current}" {}

	${2}

snippet aws_cloudformation_stack
	data "aws_cloudformation_stack" "${1}" {
	  name = "$2}"
	}

	${3}

snippet aws_ecs_container_definition
	data "aws_ecs_container_definition" "${1}" {
	  task_definition = "${aws_ecs_task_definition.${2}.id}"
	  container_name = "${3}"
	}

	${4}

snippet aws_elb_service_account
	data "aws_elb_service_account" "${1}" {
	  region = "${2}" # Optional
	}

	${3}

snippet aws_iam_policy_document
	data "aws_iam_policy_document" "${1}" {
	  statement = "${2}"
	  policy_id = "${3}"
	}

	${4}

snippet aws_ip_ranges
	data "aws_ip_ranges" "${1}" {
	  services = [ "${2}" ]
	  regions = [ "${3}", "${4}" ]
	}

	${5}

snippet aws_redshift_service_account
	data "aws_redshift_service_account" "${1}" {
	  region = "${2}" # Optional
	}

	${3}

snippet aws_s3_bucket_object
	data "aws_s3_bucket_object" "${1}" {
	  bucket = "${2}"
	  key    = "${3}"
	}

	${4}

# Provider
snippet provider_aws
	provider "aws" {
	  region     = "${1}"
	  access_key = "${2}"
	  secret_key = "${3}"
	  profile    = "${4}"
	  token      = "${5}"
	}

	${6}

#Â EC2
snippet aws_ebs_volume
	resource "aws_ebs_volume" "${1}" {
	  availability_zone = "${2}"
	  encrypted         = ${3}
	  iops              = ${4}
	  size              = ${5}
	  snapshot_id       = "${6}"
	  type              = "${7}" # "standard", "gp2", "io1", or "st1"
	  kms_key_id        = "${8}"

	  tags {
	    Name = "${9}"
	  }
	}

	${10}

snippet aws_eip
	resource "aws_eip" "${1}" {
	  instance                  = "${aws_instance.${2}.id}"
	  vpc                       = ${3}
	  network_interface         = "${4}"
	  associate_with_private_ip = "${5}"
	}

	${6}

snippet aws_eip_allocation
	resource "aws_eip_association" "${1:eip_assoc}" {
	  instance_id   = "${aws_instance.${2}.id}"
	  allocation_id = "${aws_eip.${3}.id}"
	}

	${4}

snippet aws_elb
	resource "aws_elb" "${1}" {
	  name               = "${2}"
	  availability_zones = ["${3}", "${4}", "${5}"]

	  access_logs {
	    bucket        = "${6}"
	    bucket_prefix = "${7}"
	    interval      = ${8}
	  }

	  listener {
	    instance_port     = ${9}
	    instance_protocol = "${10:http}"
	    lb_port           = ${11:80}
	    lb_protocol       = "${12:http}"
	  }

	  listener {
	    instance_port      = ${13}
	    instance_protocol  = "${14:http}"
	    lb_port            = ${15:443}
	    lb_protocol        = "${16:https}"
	    ssl_certificate_id = "arn:aws:iam::${17}"
	  }

	  health_check {
	    healthy_threshold   = ${18}
	    unhealthy_threshold = ${19}
	    timeout             = ${20}
	    target              = "${21:HTTP:8000/}"
	    interval            = ${22:30}
	  }

	  instances                   = ["${aws_instance.${23}.id}"]
	  cross_zone_load_balancing   = ${24:true}
	  idle_timeout                = ${25}
	  connection_draining         = ${26:true}
	  connection_draining_timeout = ${27}

	  tags {
	    Name = "${28}"
	  }
	}

	${29}

snippet aws_elb_attachment
	resource "aws_elb_attachment" "${1}" {
	  elb      = "${aws_elb.${2}.id}"
	  instance = ["${aws_instance.${3}.id}"]
	}

	${4}

snippet aws_keypair
	resource "aws_key_pair" "${1}" {
	  key_name   = "${2}"
	  public_key = "${3}"
	}

	${4}

snippet aws_placement_group
	resource "aws_placement_group" "${1}" {
	  name     = "${2}"
	  strategy = "${3}"
	}

	${4}

## IAM
snippet aws_iam_access_key
	resource "aws_iam_access_key" "${1}" {
	  name = "${2}"
	}

	${3}

snippet aws_iam_account_password_policy
	resource "aws_iam_account_password_policy" "${1}" {
	  allow_users_to_change_password = "${2}"
	  hard_expiry                    = "${3}"
	  max_password_age               = "${4}"
	  minimum_password_length        = "${5}"
	  password_reuse_prevention      = "${6}"
	  require_lowercase_characters   = "${7}"
	  require_numbers                = "${8}"
	  require_symbols                = "${9}"
	  require_uppercase_characters   = "${10}"
	}

	${11}

snippet aws_iam_group
	resource "aws_iam_group" "${1}" {
	  name = "${2}"
	  path = "${3}"
	}

	${4}

snippet aws_iam_group_membership
	resource "aws_iam_group_membership" "${1}" {
	  name  = "${2}"
	  users = "${3}"
	  group = "${4}"
	}

	${5}

snippet aws_iam_group_policy
	resource "aws_iam_group_policy" "${1}" {
	  policy = "${2}"
	  name   = "${3}"
	  group  = "${4}"
	}

	${5}

snippet aws_iam_group_policy_attachment
	resource "aws_iam_group_policy_attachment" "${1}" {
	  group      = "${2}"
	  policy_arn = "${3}"
	}

	${4}

snippet aws_iam_instance_profile
	resource "aws_iam_instance_profile" "${1}" {
	  name        = "${2}"
	  name_prefix = "${3}"
	  path        = "${4}"
	  roles       = ["${5}"]
	}

	${5}

snippet aws_iam_policy
	resource "aws_iam_policy" "${1}" {
	  description = "${2}"
	  path        = "${3}"
	  policy      = "${4}"
	  name        = "${5}"
	}

	${6}

snippet aws_iam_policy_attachment
	resource "aws_iam_policy_attachment" "${1}" {
	  name       = "${2}"
	  users      = ["${3}"]
	  roles      = ["${4}"]
	  groups     = ["${5}"]
	  policy_arn = "${6}"
	}

	${7}

snippet aws_iam_role
	resource "aws_iam_role" "${1}" {
	  name               = "${2}"
	  name_prefix        = "${3}"
	  assume_role_policy = "${4}"
	  path               = "${5}"
	}

	${6}

snippet aws_iam_role_policy
	resource "aws_iam_role_policy" "${1}" {
	  name   = "${2}"
	  policy = "${3}"
	  role   = "${4}"
	}

	${5}

snippet aws_iam_role_policy_attachment
	resource "aws_iam_role_policy_attachment" "${1}" {
	  role       = "${2}"
	  policy_arn = "${3}"
	}

	${4}

snippet aws_iam_saml_provider
	resource "aws_iam_saml_provider" "${1}" {
	  name                   = "${2}"
	  saml_metadata_document = "${file("${3}.xml")}"
	}

	${4}

snippet aws_iam_server_certificate
	resource "aws_iam_server_certificate" "${1}" {
	  name             = "${2}"
	  certificate_body = "${file("${3:cert.pem}")}"
	  private_key      = "${file("${4:key.pem}")}"
	}

	${5}

snippet aws_iam_user
	resource "aws_iam_user" "${1}" {
	  name          = "${2}"
	  path          = "${3}"
	  force_destroy = "${4}"
	}

	${4}

snippet aws_iam_user_policy
	resource "aws_iam_user_policy" "${1}" {
	  name = "${2}"
	  user = "${3}"
	      policy = <<EOF
	{
	  "Version": "2012-10-17",
	  "Statement": [
		{
		  "Action": [
			"${4:ec2:Describe*}"
		  ],
		  "Effect": "${5:Allow}",
		  "Resource": "*"
		}
	  ]
	}
	EOF
	}

	${6}

snippet aws_iam_user_policy_attachment
	resource "aws_iam_user_policy_attachment" "${1}" {
	  user       = "${2}"
	  policy_arn = "${2}"
	}

	${4}

snippet aws_iam_user_ssh_key
	resource "aws_iam_user_ssh_key" "${1}" {
	  username   = "${2}"
	  encoding   = "${3}" # 'PEM' or 'SSH'
	  public_key = "${4}"
	  status     = "${5}"
	}

	${6}

# Directory Services
snippet aws_directory_service_directory
	resource "aws_directory_service_directory" "${1}" {
	  name        = "${2}"
	  password    = "${3}"
	  size        = "${4}"
	  alias       = "${5}"
	  description = "${6}"
	  short_name  = "${7}"
	  enable_sso  = "${8}"
	  type        = "${9}"
	  vpc_settings {
	    vpc_id     = "${10}"
	    subnet_ids = ["${11}"]
	  }
	  connect_settings {
	    vpc_id            = "${12}"
	    subnet_ids        = ["${13}"]
	    customer_username = "${14}"
	    customer_dns_ips  = ["${15}"]
	  }
	}

	${16}

